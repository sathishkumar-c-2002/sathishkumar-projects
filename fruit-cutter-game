import asyncio
import pygame, sys,mixer
import os
import random
import time
import math,arcade

async def main():
    player_lives = 3
    score = 0
    fruits = ['melon', 'orange', 'pomegranate', 'guava', 'bomb']
    WIDTH = 1080
    HEIGHT = 700
    FPS = 12

    pygame.init()
    pygame.display.set_caption('FRUIT NINJA--DataFlair')
    gameDisplay = pygame.display.set_mode((WIDTH, HEIGHT),0,32)
    clock = pygame.time.Clock()
   
    

    WHITE = (255,255,255)
    BLACK = (0,0,0)
    RED = (255,0,0)
    GREEN = (0,255,0)
    BLUE = (0,0,255)
    
    gameDisplay.fill((WHITE))
    background=pygame.display.set_mode((1200,1080))
    background = pygame.image.load('images/back.jpg')                                   
    pygame.transform.scale(background,(0,0))
                                                                                        #------------------------------------
                                                                                
    font = pygame.font.Font(os.path.join(os.getcwd(), 'Obised.ttf'), 35)
    score_text = font.render('Score : ' + str(score), True, (255, 255, 255))

    def generate_random_fruits(fruit):
        fruit_path = "images/"+fruit + ".png"
        cut_effect='images/hit.png'
        data[fruit] = {
            'img': pygame.image.load(fruit_path),
            'img2': pygame.image.load(cut_effect),
            'x' : random.randint(100,500),               
            'y' : 800,
            'speed_x': random.randint(-10,10),    
            'speed_y': random.randint(-80, -60),    
            'throw': False,                       
            't': 0,                               
            'hit': False  
        }

        if random.random() >= 0.75 :     
            data[fruit]['throw'] = True
        else:
            data[fruit]['throw'] = False
            
    data = {}

    def play_bomb_sound():
        pygame.mixer.init
        pygame.mixer.music.load("audio/bomb_sound.mp3")
        pygame.mixer.music.set_volume(0.9) 
        pygame.mixer.music.play() 
    
    def play_knife_cut_sound():
        pygame.mixer.init
        pygame.mixer.music.load("audio/knife_cut_sound.mp3")
        pygame.mixer.music.set_volume(0.5) 
        pygame.mixer.music.play() 
    
    def play_game_background_score():
        pygame.mixer.init
        pygame.mixer.music.load("audio/game_background_score.mp3")
        pygame.mixer.music.set_volume(0.8) 
        pygame.mixer.music.play() 
        
    def play_throw_fruit_sound():
        pygame.mixer.init
        pygame.mixer.music.load("audio/throw_fruit_sound.mp3")
        pygame.mixer.music.set_volume(1) 
        pygame.mixer.music.play() 
        

    def play_gameover_sound():
        pygame.mixer.init
        pygame.mixer.music.load("audio/game_over_sound.mp3")
        pygame.mixer.music.set_volume(0.7) 
        pygame.mixer.music.play() 

    for fruit in fruits:
        generate_random_fruits(fruit)

    font_name = pygame.font.match_font('Obised.ttf')

    def draw_text(display, text, size, x, y):
        font = pygame.font.Font(font_name, size)
        text_surface = font.render(text, True, WHITE)
        text_rect = text_surface.get_rect()
        text_rect.midtop = (x, y)
        gameDisplay.blit(text_surface, text_rect)


    def draw_lives(display, x, y, lives, image) :
        for i in range(lives) :
            img = pygame.image.load(image) 
            img_rect = img.get_rect()      
            img_rect.x =  int(x + 80 * i)
            img_rect.y = y                 
            display.blit(img, img_rect)
    lives_icon = pygame.image.load('images/white_lives.png')

    def hide_cross_lives(x, y):
        gameDisplay.blit(pygame.image.load("images/red_lives.png"), (x, y))
        
        
    def show_gameover_screen():  
              
        gameDisplay.blit(background, (0,0))
        fruit_ninja_logo=pygame.image.load('images/fnlogo.png')
        gameDisplay.blit(fruit_ninja_logo, (250,50))
        #draw_text(gameDisplay,"FRUIT NINJA!", 64, WIDTH / 2, HEIGHT / 4)
        
        if not game_over:
        
            draw_text(gameDisplay,"     Score : " + str(score), 60, WIDTH / 2,400)
           

        press_enter_logo=pygame.image.load('images/pressenter.png')
        gameDisplay.blit(press_enter_logo, (350,450))

        #draw_text(gameDisplay, "Press a key to begin!", 50, WIDTH / 2, HEIGHT * 3 / 4)
        pygame.display.flip()
        waiting = True
        while waiting:
            clock.tick(FPS)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                if event.type == pygame.KEYUP:
                    waiting = False

    first_round = True
    
    game_over = True        
    game_running = True  
    
     
    while game_running :
    
        if game_over :
            
            if first_round :
                show_gameover_screen()
                
                first_round = False
            game_over = False
            
            player_lives = 3
            
            draw_lives(gameDisplay, 950, 5, player_lives, 'images/red_lives.png')
            score = 0

        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                game_running = False
                

        gameDisplay.blit(background, (0, 0))
        gameDisplay.blit(score_text, (0, 0))
        draw_lives(gameDisplay,950, 5, player_lives, 'images/red_lives.png')

        for key, value in data.items():
            if value['throw']:
                value['x'] += value['speed_x']
                value['y'] += value['speed_y']
                value['speed_y'] += (1 * value['t'])
                value['t'] += 1
                

                if value['y'] <= 800:
                    gameDisplay.blit(value['img'], (value['x'], value['y']))
                else:
                    generate_random_fruits(key)

                current_position = pygame.mouse.get_pos()

                if not value['hit'] and current_position[0] > value['x'] and current_position[0] < value['x']+60 and current_position[1] > value['y'] and current_position[1] < value['y']+60:
                    if key == 'bomb':
                        play_bomb_sound()
                        player_lives -= 1                   
                        if player_lives == 0:
                            hide_cross_lives(690, 15)
                        elif player_lives == 1 :
                            hide_cross_lives(725, 15)
                        elif player_lives == 2 :
                            hide_cross_lives(760, 15)
                    
                        if player_lives < 0 :
                            play_gameover_sound()
                            show_gameover_screen() 
                            
                                                       
                            game_over = True

                        half_fruit_path = 'images\explosion.png'
                        
                    else:
                        
                        play_knife_cut_sound()                       
                        half_fruit_path = 'images\half_' + key + '.png'
                        
                        
                        
                        
                    value['img'] = pygame.image.load(half_fruit_path)
                    
                    
                    value['speed_x'] += 10
                    
                    if key != 'bomb' :
                        score += 1
                    else:
                        score-=1                           
                    
                    score_text = font.render('Score : ' + str(score), True, (255, 255, 255))
                    value['hit'] = True
            else:
                
                generate_random_fruits(key)
                

            
            
                
                

        pygame.display.update()
        await asyncio.sleep(0)                #*************************************
        
        clock.tick(FPS)
    pygame.quit()

asyncio.run(main())
